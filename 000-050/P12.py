"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import numpy as np

def is_prime(n):
# No possible divisor beyond sqrt(n). Only odd divisors
    prime = True
    for div in range(3, int(n**.5) + 1, 2):
        if n % div == 0:
            prime = False
            return prime
    return prime

def prime_factors(num):
    # List of divisors
    divs = []
    factorization = False
    prime = 2
    while not factorization:
        if is_prime(prime):
            factor_count = 0
            if num % prime == 0:
                division_by_prime = True
            else:
                division_by_prime = False
            while division_by_prime:
                if num % prime == 0:
                    factor_count += 1
                    num /= prime
                else:
                    # Save quantity of divisors for current prime number
                    divs.append(factor_count)
                    division_by_prime = False
        # Check if the number has been totally factorized
        if num == 1:
            factorization = True
        else:
            # Increment prime counter
            if prime == 2:
                prime = 3
            else:
                prime += 2 #skip even numbers when looking for primes
    # Calculate number of divisors: multiply each factor + 1
    divs = [number + 1 for number in divs]
    factors = np.prod(np.array(divs)) 
    return factors

# Initial guess will be triangular number "n
n = 2
trinum = n * (n + 1) / 2

divisors = 500
divisor_count = False

while not divisor_count:
    trinum = n * (n + 1) / 2
    div_count = prime_factors(trinum)
    print('The nth', n, 'trinum number has' ,prime_factors(trinum), 'divisors.')
    if div_count > divisors:
        divisor_count = True
    else:
        n += 1

print('The number ', trinum, ' has more than 500 divisors.')